# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rrL7RegneVt7MCPeVThge9d7LhfVMkLY
"""

import os
import gdown
import joblib
import streamlit as st
import numpy as np
import pandas as pd

MODEL_PATH = "random_forest_model_render_compat.pkl"
DRIVE_FILE_ID = "1F2k8Ym2v5IAm8elxmyVYgsR8FoYIwgSy"  # <-- reemplazÃ¡ por el ID real de tu archivo en Drive

def descargar_modelo():
    if not os.path.exists(MODEL_PATH):
        url = f"https://drive.google.com/uc?id={DRIVE_FILE_ID}"
        gdown.download(url, MODEL_PATH, quiet=False)

@st.cache_resource
def load_model():
    descargar_modelo()
    return joblib.load(MODEL_PATH)

model = load_model()

st.title("Estimador de Precio de Propiedades")

st.markdown("IngresÃ¡ las caracterÃ­sticas de tu propiedad en CABA:")

# Inputs numÃ©ricos
rooms = st.number_input("Ambientes", value=2, min_value=0)
baths = st.number_input("BaÃ±os", value=1, min_value=0)
surf_total = st.number_input("Superficie total (m2)", value=60, min_value=1)
surf_cov = st.number_input("Superficie cubierta (m2)", value=50, min_value=0)
lat = st.number_input("Latitud", value=-34.60)
lon = st.number_input("Longitud", value=-58.38)

# Inputs categÃ³ricos
prop_type = st.selectbox("Tipo de propiedad", ["Departamento", "PH", "Casa", "Terreno"])
grupo_precio = st.selectbox("Grupo de Precio", ["bajo", "medio", "alto"])

# Servicios opcionales (booleanos)
parrilla = st.checkbox("Parrilla")
cochera = st.checkbox("Cochera/Garage")
lavadero = st.checkbox("Lavadero")
terraza = st.checkbox("Terraza")
suite = st.checkbox("Suite")

if st.button("Predecir precio"):

    nuevos_casos = pd.DataFrame([{
        'Rooms': rooms,
        'Baths': baths,
        'SurfTotal': surf_total,
        'SurfCov': surf_cov,
        'Lat': lat,
        'Lon': lon,
        'PropType': prop_type,
        'Grupo_Precio': grupo_precio,
        'Parrilla': parrilla,
        'Cochera/Garage': cochera,
        'Lavadero': lavadero,
        'Terraza': terraza,
        'Suite': suite
    }])

    # Features derivadas
    nuevos_casos["ratio_covered_total"] = nuevos_casos["SurfCov"] / (nuevos_casos["SurfTotal"] + 1e-5)
    nuevos_casos["total_rooms_surface_ratio"] = nuevos_casos["SurfTotal"] / (nuevos_casos["Rooms"] + 1)
    nuevos_casos["covered_rooms_surface_ratio"] = nuevos_casos["SurfCov"] / (nuevos_casos["Rooms"] + 1)

    pred = model.predict(nuevos_casos)[0]

    st.success(f"ðŸ’° Precio estimado: ${pred:,.0f}")
